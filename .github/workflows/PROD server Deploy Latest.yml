name: PROD - Production Branch Mishmash Deployment

on:
  push:
    branches: [prod]

  workflow_dispatch:


jobs:
  deploy:
    runs-on: ubuntu-latest
    environment:
      name: Production
      url: https://mishmash.colab.duke.edu
    steps:
      - name: Set deployment timestamp
        run: echo "DEPLOYMENT_TIME=$(date -u)" >> $GITHUB_ENV


      - name: Connect to server and deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd /home/vcm/studyabroad
            git fetch origin
            git checkout prod  # Switch to prod branch
            git reset --hard origin/prod  # Force sync to remote prod branch
            git pull origin prod


            # Setup sentry token
            cat <<EOF > ./mishmash/frontend/.sentryclirc
            [auth]
            token=${{ secrets.SENTRY_AUTH_TOKEN }}
            EOF



            # Create .env file with all secret values.
            cat <<EOF > .env
            DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }}
            DJANGO_SUPERUSER_PASSWORD=${{ secrets.DJANGO_SUPERUSER_PASSWORD }}
            OIDC_CLIENT_SECRET=${{ secrets.OIDC_CLIENT_SECRET }}
            SECRET_KEY=${{ secrets.SECRET_KEY }}
            AES_CIPHER_KEY=${{ secrets.AES_CIPHER_KEY }}
            SENDGRID_API_KEY=${{ secrets.SENDGRID_API_KEY }}
            SENDGRID_DEFAULT_FROM=${{ secrets.SENDGRID_DEFAULT_FROM }}
            EOF


            docker compose -f docker-compose.prod.yml down
            docker volume rm $(docker volume ls -q)
            docker compose -f docker-compose.prod.yml up -d --build
            echo "ðŸ”„ Checking container status..."
            docker compose ps

      - name: Check Health Endpoints
        id: check_health
        continue-on-error: true
        run: |
          # Define the URLs to check
          URLS=(
            "https://dev-mishmash.colab.duke.edu/"
            "https://test-mishmash.colab.duke.edu/"
            "https://mishmash.colab.duke.edu/"
          )
          
          # Wait a few seconds for containers to be fully up
          sleep 5
          
          FAILED_URLS=""
          for URL in "${URLS[@]}"; do
            HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" "$URL")
            echo "Checking $URL: HTTP $HTTP_CODE"
            if [ "$HTTP_CODE" -ne 200 ]; then
              FAILED_URLS+="\n$URL returned HTTP $HTTP_CODE"
            fi
          done
          
          if [ -n "$FAILED_URLS" ]; then
            echo "Some endpoints failed:$FAILED_URLS"
            echo "failed_urls=$FAILED_URLS" >> $GITHUB_OUTPUT
            exit 1
          else
            echo "All endpoints passed the health check."
            echo "failed_urls=" >> $GITHUB_OUTPUT
          fi

      - name: Discord Success Notification
        if: steps.check_health.outcome == 'success'
        uses: sarisia/actions-status-discord@v1
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          title: "PROD - Deployment Successful"
          description: "Containers started successfully at ${{ env.DEPLOYMENT_TIME }}"
          color: 0x00ff00  # Green color

      - name: Discord Failure Notification
        if: steps.check_health.outcome == 'failure'
        uses: sarisia/actions-status-discord@v1
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          title: "One or more endpoints failed the health check"
          description: "Health check failed at ${{ env.DEPLOYMENT_TIME }}. Details: ${{ steps.check_health.outputs.failed_urls }}"
          color: 0xff0000  # Red color
