name: Server Monitor and Auto-Redeploy

on:
  schedule:
    - cron: "0 * * * *"  # Runs every hour
  workflow_dispatch:      # Allows manual triggering

jobs:
  monitor-and-redeploy:
    runs-on: ubuntu-latest
    steps:
      - name: Check Health Endpoints
        run: |
            set +e
            URLS=(
              "https://dev-mishmash.colab.duke.edu/"
              "https://test-mishmash.colab.duke.edu/"
              "https://mishmash.colab.duke.edu/"
            )
        
            FAILED_URLS=""
            for URL in "${URLS[@]}"; do
              HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" "$URL")
              echo "Checking $URL: HTTP $HTTP_CODE"
              if [ "$HTTP_CODE" -ne 200 ]; then
                FAILED_URLS+="\n$URL returned HTTP $HTTP_CODE"
              fi
            done
        
            if [ -n "$FAILED_URLS" ]; then
              echo -e "Some endpoints failed:$FAILED_URLS"
            else
              echo "All endpoints passed the health check."
            fi
        
            {
              echo "failed_urls<<EOF"
              echo -e "$FAILED_URLS"
              echo "EOF"
            } >> "$GITHUB_OUTPUT"


      - name: Send Discord Notification on Failure
        if: steps.check_health.outputs.failed_urls != ''
        run: |
          WEBHOOK_URL="${{ secrets.DISCORD_WEBHOOK_URL_HEALTHCHECK }}"
          FAILED="${{ steps.check_health.outputs.failed_urls }}"
          MESSAGE=":warning: Health check failed for the following endpoint(s): $FAILED\nInitiating automatic redeployment from main branch..."
          PAYLOAD="{\"content\": \"$MESSAGE\"}"
          echo "Sending Discord notification..."
          curl -H "Content-Type: application/json" -X POST -d "$PAYLOAD" "$WEBHOOK_URL"

      - name: Trigger Redeployment Workflows
        if: steps.check_health.outputs.failed_urls != ''
        run: |
          # Trigger redeployment workflows for each environment
          echo "Triggering redeployment workflows..."
          
          # Get the repository name from GitHub context
          REPO="${{ github.repository }}"
          echo "Using repository: $REPO"
          
          # Dev server redeployment
          curl -X POST \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Authorization: token ${{ github.token }}" \
            "https://api.github.com/repos/$REPO/actions/workflows/Dev%20Server%20Deploy%20Latest%20Main.yml/dispatches" \
            -d '{"ref":"main"}'
          
          # Test server redeployment
          curl -X POST \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Authorization: token ${{ github.token }}" \
            "https://api.github.com/repos/$REPO/actions/workflows/Testing%20Server%20Deploy%20Latest.yml/dispatches" \
            -d '{"ref":"main"}'
          
          # Production server redeployment
          curl -X POST \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Authorization: token ${{ github.token }}" \
            "https://api.github.com/repos/$REPO/actions/workflows/PROD%20server%20Deploy%20Latest.yml/dispatches" \
            -d '{"ref":"main"}'
          
          echo "Redeployment workflows triggered successfully" 
