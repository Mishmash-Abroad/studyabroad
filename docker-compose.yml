# Study Abroad Program - Docker Compose Configuration
# This file orchestrates the multi-container Docker application for the Study Abroad Program portal.
# It sets up and connects four main services:
#   1. Backend (Django REST API)
#   2. Frontend (React application)
#   3. Database (MySQL)
#   4. Nginx (Reverse proxy)
#
# Usage:
#   Development: docker compose up
#   Production:  docker compose -f docker-compose.prod.yml up
#
# Author: Duke University
# Version: 1.0

services:
  # Django Backend Service
  # Handles API requests, database operations, and business logic
  backend:
    build: 
      context: ./mishmash
      dockerfile: Dockerfile
    develop:
      watch:
        # Hot-reload configuration for development
        - path: ./mishmash
          target: /app
          action: sync
          ignore:
            # Exclude cache and virtual environment files
            - "**/__pycache__"
            - "**/*.pyc"
            - "**/*.pyo"
            - "**/*.pyd"
            - "**/.Python"
            - "**/env"
            - "**/venv"
            - "**/.env"
            - "**/.venv"
    command: >
      sh -c "python manage.py wait_for_db &&
             python manage.py migrate && 
             python manage.py runserver 0.0.0.0:8000"
    volumes:
      - static_volume:/app/static    # Persistent storage for static files
      - media_volume:/app/media      # Persistent storage for uploaded media
    ports:
      - "8000:8000"  # Exposed for development debugging
    environment:
      - DEBUG=1
      - DJANGO_ALLOWED_HOSTS=localhost,dev-mishmash.colab.duke.edu,mishmash.colab.duke.edu,testserver
      - DATABASE_NAME=mishmash
      - DATABASE_USER=root
      - DATABASE_PASSWORD=root
      - DATABASE_HOST=db
      - DATABASE_PORT=3306
    depends_on:
      db:
        condition: service_healthy  # Ensures database is ready before starting

  # React Frontend Service
  # Serves the user interface and handles client-side logic
  frontend:
    build: 
      context: ./mishmash/frontend
      dockerfile: Dockerfile
    develop:
      watch:
        # Hot-reload configuration for frontend development
        - path: ./mishmash/frontend/src
          target: /app/src
          action: sync
          ignore:
            - node_modules/
            - build/
        - path: ./mishmash/frontend/public
          target: /app/public
          action: sync
    volumes:
      - ./mishmash/frontend:/app      # Mount source code
      - /app/node_modules             # Preserve node_modules in container
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - REACT_APP_API_URL=http://localhost:8000/api
      - WATCHPACK_POLLING=true        # Enable file watching on Windows
      - CHOKIDAR_USEPOLLING=true     # Enable polling for hot reload
    command: npm start
    depends_on:
      - backend

  # MySQL Database Service
  # Stores all application data with persistence
  db:
    image: mysql:8.0
    command: --default-authentication-plugin=mysql_native_password
    volumes:
      - mysql_data:/var/lib/mysql    # Persistent database storage
    environment:
      - MYSQL_ROOT_PASSWORD=root
      - MYSQL_DATABASE=mishmash
    ports:
      - "3306:3306"  # Exposed for development debugging
    healthcheck:
      # Ensure database is accepting connections
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p$$MYSQL_ROOT_PASSWORD"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Nginx Service for Development
  nginx:
    image: nginx:1.25
    ports:
      - "80:80"
    volumes:
      - ./nginx_dev/dev.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - frontend
      - backend

# Persistent Data Storage
volumes:
  mysql_data:      # Database persistence
  static_volume:   # Django static files
  media_volume:    # User-uploaded media files
  build_volume: